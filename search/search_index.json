{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#home","title":"Home","text":""},{"location":"blog/","title":"Index","text":""},{"location":"blog/#blog","title":"Blog","text":""},{"location":"blog/2025/07/07/how-to-set-zsh-in-ubuntu/","title":"How to set zsh in ubuntu","text":"","tags":["zsh"]},{"location":"blog/2025/07/07/how-to-set-zsh-in-ubuntu/#how-to-set-zsh-in-ubuntu","title":"How to set <code>zsh</code> in ubuntu","text":"<p>To set Zsh as your default shell in Ubuntu, follow these simple steps:</p>","tags":["zsh"]},{"location":"blog/2025/07/07/how-to-set-zsh-in-ubuntu/#step-by-step-set-zsh-as-default-shell","title":"Step-by-Step: Set Zsh as Default Shell","text":"<ol> <li> <p>Install Zsh (if not already installed)</p> <p>Open your terminal and run:</p> <pre><code>sudo apt update\nsudo apt install zsh\n</code></pre> </li> <li> <p>Check Zsh Installation</p> <p>Verify that Zsh is installed:</p> <p>You should see output like:</p> <pre><code>zsh 5.9 (x86_64-ubuntu-linux-gnu)\n</code></pre> </li> <li> <p>Change Default Shell to Zsh</p> <p>Use the <code>chsh</code> (change shell) command:</p> <pre><code>chsh -s $(which zsh)\n</code></pre> <p>Or explicitly:</p> <pre><code>chsh -s /usr/bin/zsh\n</code></pre> <p>\ud83d\udd10 You may need to log out and back in (or restart the terminal session) for the change to take effect.</p> </li> <li> <p>Start Zsh Immediately (Optional)</p> <p>You can start Zsh in the current terminal by simply typing:</p> <pre><code>zsh\n</code></pre> </li> <li> <p>(Optional) Configure Zsh with Oh My Zsh</p> <p>To enhance your Zsh experience:</p> <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>This adds themes, plugins, and a better user experience.</p> </li> </ol>","tags":["zsh"]},{"location":"blog/2025/07/07/how-to-set-zsh-in-ubuntu/#confirm-its-working","title":"Confirm It's Working","text":"<p>To confirm that Zsh is your current default shell:</p> <pre><code>echo $SHELL\n</code></pre> <p>It should output something like:</p> <pre><code>/usr/bin/zsh\n</code></pre>","tags":["zsh"]},{"location":"blog/2025/07/07/how-to-set-zsh-in-ubuntu/#checkpoints-to-fix-chsh-not-setting-zsh","title":"Checkpoints to Fix <code>chsh</code> Not Setting Zsh","text":"<ol> <li> <p>Check if Zsh is listed in <code>/etc/shells</code></p> <p><code>chsh</code> only allows shells that are listed in <code>/etc/shells</code>.</p> <p>Run:</p> <pre><code>cat /etc/shells\n</code></pre> <p>You should see an output like:</p> <pre><code>/bin/sh\n/bin/bash\n/bin/zsh\n</code></pre> <p>If <code>/usr/bin/zsh</code> or <code>/bin/zsh</code> is not listed, you need to add it manually:</p> <pre><code>which zsh\n</code></pre> <p>Let\u2019s say it returns <code>/usr/bin/zsh</code>.</p> <p>Then, add it to <code>/etc/shells</code> with:</p> <pre><code>sudo nano /etc/shells\n</code></pre> <p>Add this line at the end (if not already there):</p> <pre><code>/usr/bin/zsh\n</code></pre> <p>Save and exit (<code>Ctrl+O</code>, <code>Enter</code>, <code>Ctrl+X</code> in nano).</p> </li> <li> <p>Retry the <code>chsh</code> Command</p> <p>Now try again:</p> <pre><code>chsh -s /usr/bin/zsh\n</code></pre> <p>Then log out and log back in, or restart the terminal.</p> </li> <li> <p>Verify Shell Change</p> <p>Check your current shell:</p> <pre><code>echo $SHELL\n</code></pre> <p>Expected output:</p> <pre><code>/usr/bin/zsh\n</code></pre> </li> <li> <p>If It Still Doesn\u2019t Work: Use Root or Edit <code>/etc/passwd</code></p> <p>Use <code>sudo</code> (if you're changing another user's shell):</p> <pre><code>sudo chsh -s /usr/bin/zsh your_username\n</code></pre> <p>Or, manually edit <code>/etc/passwd</code> (only if you're confident):</p> <pre><code>sudo nano /etc/passwd\n</code></pre> <p>Find the line that looks like this:</p> <pre><code>your_username:x:1000:1000:Your Name,,,:/home/your_username:/bin/bash\n</code></pre> <p>Change <code>/bin/bash</code> to <code>/usr/bin/zsh</code>, so it looks like:</p> <pre><code>your_username:x:1000:1000:Your Name,,,:/home/your_username:/usr/bin/zsh\n</code></pre> <p>Save and exit. Then log out and back in.</p> <p>\u26a0\ufe0f Warning: Be careful editing <code>/etc/passwd</code>, as mistakes can lock you out of your user account.</p> </li> </ol> <p>Summary of Fix Steps</p> Step Command Check if Zsh is listed <code>cat /etc/shells</code> Add Zsh if missing <code>sudo nano /etc/shells</code> Retry chsh <code>chsh -s /usr/bin/zsh</code> Use sudo (if needed) <code>sudo chsh -s /usr/bin/zsh your_username</code> Manual fallback Edit <code>/etc/passwd</code> carefully","tags":["zsh"]},{"location":"blog/2025/07/07/how-to-set-zsh-in-ubuntu/#pro-tip-use-zsh-autosuggestions-and-zsh-syntax-highlighting","title":"\ud83e\udde0 Pro Tip: Use <code>zsh-autosuggestions</code> and <code>zsh-syntax-highlighting</code>","text":"<p>Both <code>zsh-autosuggestions</code> and <code>zsh-syntax-highlighting</code> significantly enhance the Zsh experience:</p> <ul> <li> <p>zsh-autosuggestions: Suggests commands as you type (like in Fish shell).</p> </li> <li> <p>zsh-syntax-highlighting: Highlights commands for better readability and error spotting.</p> </li> </ul>","tags":["zsh"]},{"location":"blog/2025/07/07/how-to-set-zsh-in-ubuntu/#common-shells-available-in-ubuntu","title":"Common Shells Available in Ubuntu:","text":"<p>In Ubuntu (or any Linux distribution), the term \"shell\" usually refers to command-line interpreters. Ubuntu can support multiple shells, and how many are available depends on what\u2019s installed on the system. Here\u2019s a breakdown:</p> <p>By default, Ubuntu comes with at least one shell, but you can install others. Here are the most common</p> Shell Package Default? Notes Bash <code>bash</code> \u2705 Yes Default shell in Ubuntu. Dash <code>dash</code> \u26a0\ufe0f Used for <code>/bin/sh</code> Lightweight shell used for system scripts. Zsh <code>zsh</code> \u274c No Popular alternative to bash (used by Oh My Zsh). Fish <code>fish</code> \u274c No User-friendly, with autosuggestions and syntax highlighting. Ksh <code>ksh</code> \u274c No KornShell \u2013 legacy compatibility. Tcsh <code>tcsh</code> \u274c No Enhanced C shell (csh-compatible). Csh <code>csh</code> \u274c No Original C shell (less common today). <p>\ud83d\udd0d How to See Installed Shells</p> <p>You can list all installed shells with:</p> <pre><code>cat /etc/shells\n</code></pre> <p>Typical output:</p> <pre><code>/bin/sh\n/bin/bash\n/bin/rbash\n/bin/dash\n/bin/zsh\n/usr/bin/fish\n</code></pre> <pre><code>echo $SHELL\n</code></pre> \ud83e\udde0 Summary <ul> <li>Default shell in Ubuntu: <code>bash</code></li> <li>Number of shells available: Varies; by default, typically 2\u20133 (like <code>bash</code>, <code>dash</code>, <code>sh</code>)</li> <li>Total number supported: Many; users can install others based on their needs.</li> </ul>","tags":["zsh"]},{"location":"shell/advanced-scripting/","title":"Advanced Scripting","text":""},{"location":"shell/advanced-scripting/#advanced-shell-scripting","title":"Advanced Shell Scripting","text":"<p>Once you're comfortable with basic shell scripts, it's time to go further. Advanced scripting lets you build more powerful and flexible automation tools.</p> <p>This page covers:</p> <ul> <li>Functions</li> <li>Arguments</li> <li>Logging</li> <li>Debugging</li> <li>Exit codes</li> <li>Trap and cleanup</li> </ul>"},{"location":"shell/advanced-scripting/#1-functions","title":"\ud83e\udde0 1. Functions","text":"<p>Functions help you organize and reuse code.</p> <pre><code>#!/bin/bash\n\ngreet() {\n  echo \"Hello, $1!\"\n}\n\ngreet \"Bishow\"\n</code></pre> <p>You can also return values using <code>echo</code>:</p> <pre><code>add() {\n  result=$(( $1 + $2 ))\n  echo $result\n}\n\nsum=$(add 3 5)\necho \"Sum is $sum\"\n</code></pre>"},{"location":"shell/advanced-scripting/#2-script-arguments","title":"\ud83d\udce6 2. Script Arguments","text":"<p>Shell scripts can accept command-line arguments:</p> <pre><code>#!/bin/bash\n\necho \"Script name: $0\"\necho \"First argument: $1\"\necho \"Second argument: $2\"\n</code></pre> <p>Special Variables</p> Variable Meaning <code>$0</code> Script name <code>$1, $2, ...</code> Arguments <code>$@</code> All arguments <code>$#</code> Number of arguments <p>Example:</p> <pre><code>#!/bin/bash\n\nif [ $# -lt 2 ]; then\n  echo \"Usage: $0 &lt;source&gt; &lt;destination&gt;\"\n  exit 1\nfi\n\ncp \"$1\" \"$2\"\n</code></pre>"},{"location":"shell/advanced-scripting/#3-logging-output","title":"\ud83d\udcc2 3. Logging Output","text":"<p>Redirect output to a file:</p> <pre><code>#!/bin/bash\n\nlog_file=\"/var/log/myscript.log\"\n\necho \"Starting backup...\" &gt;&gt; \"$log_file\" 2&gt;&amp;1\nrsync -av ~/Documents /mnt/backup &gt;&gt; \"$log_file\" 2&gt;&amp;1\n</code></pre> <p>Or use <code>tee</code> to write to both the terminal and the log file:</p> <pre><code>echo \"Running task...\" | tee -a \"$log_file\"\n</code></pre>"},{"location":"shell/advanced-scripting/#4-exit-codes-and-error-handling","title":"\ud83e\uddea 4. Exit Codes and Error Handling","text":"<p>Always check if a command succeeded:</p> <pre><code>#!/bin/bash\n\nmkdir /some/dir\nif [ $? -ne 0 ]; then\n  echo \"Failed to create directory!\"\n  exit 1\nfi\n</code></pre> <p>A better way using set <code>-e</code>:</p> <pre><code>#!/bin/bash\nset -e  # Exit script on any error\n\necho \"Starting...\"\ncp file.txt /tmp/\necho \"Done.\"\n</code></pre>"},{"location":"shell/advanced-scripting/#5-debugging-scripts","title":"\ud83d\udee0 5. Debugging Scripts","text":"<p>Use these techniques to debug:</p> <ul> <li><code>set -x</code> \u2014 Show each command before running</li> <li><code>set -e</code> \u2014 Exit on any error</li> <li><code>set -u</code> \u2014 Exit on undefined variables</li> </ul> <pre><code>#!/bin/bash\nset -eux  # enable debugging, exit on error, and undefined vars\n\necho \"Starting script...\"\nsome_command\n</code></pre> <p>You can also run a script with <code>bash -x</code>:</p> <pre><code>bash -x myscript.sh\n</code></pre>"},{"location":"shell/advanced-scripting/#6-cleanup-with-trap","title":"\ud83e\uddf9 6. Cleanup with <code>trap</code>","text":"<p><code>trap</code> lets you catch signals like <code>CTRL+C</code> or script exit and run cleanup code.</p> <pre><code>#!/bin/bash\n\ncleanup() {\n  echo \"Cleaning up...\"\n  rm -f /tmp/tempfile\n}\n\ntrap cleanup EXIT\n\ntouch /tmp/tempfile\necho \"Doing work...\"\nsleep 5\n</code></pre> <p>This ensures <code>/tmp/tempfile</code> is deleted when the script exits.</p>"},{"location":"shell/advanced-scripting/#example-backup-script-with-logging-error-handling","title":"\ud83d\udcda Example: Backup Script with Logging &amp; Error Handling","text":"<pre><code>#!/bin/bash\nset -euo pipefail\n\nLOG=\"$HOME/backup.log\"\n\nbackup() {\n  echo \"[INFO] Starting backup: $(date)\" | tee -a \"$LOG\"\n  rsync -av --delete \"$HOME/Documents/\" \"/mnt/backup/Documents/\" | tee -a \"$LOG\"\n  echo \"[INFO] Backup complete: $(date)\" | tee -a \"$LOG\"\n}\n\ntrap 'echo \"[ERROR] Backup failed at $(date)\" | tee -a \"$LOG\"' ERR\n\nbackup\n</code></pre>"},{"location":"shell/advanced-scripting/#summary","title":"\u2705 Summary","text":"Feature Tool Reuse code Functions Handle input Script arguments Debug issues <code>set -x</code>, <code>bash -x</code> Error recovery <code>trap</code>, exit codes Log output <code>tee</code>, redirects <p>Advanced scripting lets you build smarter, safer, and more flexible shell tools. Start small and gradually add more features.</p>"},{"location":"shell/bash-vs-zsh/","title":"Bash vs Zsh","text":""},{"location":"shell/bash-vs-zsh/#bash-vs-zsh","title":"Bash vs Zsh","text":"<p>The Linux shell environment can be powered by different shell programs. Two of the most popular are:</p> <ul> <li>Bash \u2013 The default shell on most Linux systems.</li> <li>Zsh \u2013 A powerful alternative with many user-friendly features.</li> </ul> <p>Let\u2019s compare them and help you decide which one to use.</p>"},{"location":"shell/bash-vs-zsh/#what-is-bash","title":"\ud83d\udd0d What Is Bash?","text":"<p>Bash (Bourne Again SHell) is the most commonly used shell on Linux. It is:</p> <ul> <li>Default on Ubuntu, Debian, and most other distros.</li> <li>Scriptable and well-documented.</li> <li>POSIX-compliant (great for writing portable scripts).</li> </ul> <p>Example:</p> <pre><code>echo \"Hello from Bash\"\n</code></pre>"},{"location":"shell/bash-vs-zsh/#what-is-zsh","title":"\ud83d\udca1 What Is Zsh?","text":"<p>Zsh (Z Shell) is a shell with many modern features built in, such as:</p> <ul> <li>Smart autocompletion</li> <li>Syntax highlighting</li> <li>Plugins and themes</li> <li>Better user experience for interactive use</li> </ul> <p>It is popular among developers and is the default on macOS since Catalina.</p>"},{"location":"shell/bash-vs-zsh/#comparison-table","title":"\u2696\ufe0f Comparison Table","text":"Feature Bash Zsh Default Shell? Most Linux distros macOS (since Catalina) Plugins &amp; Themes Manual setup Easy with Oh My Zsh Autocompletion Basic Advanced &amp; customizable Syntax Highlighting No Yes (with plugin) Prompt Customization Manual Easy (Powerlevel10k, etc.) Learning Curve Beginner-friendly Beginner-friendly Scripting Excellent Excellent, mostly compatible"},{"location":"shell/bash-vs-zsh/#using-plugins-with-zsh","title":"\ud83d\udd0c Using Plugins with Zsh","text":"<p>One of the best reasons to use Zsh is its support for plugins through Oh My Zsh:</p> <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>Then you can enable plugins like:</p> <ul> <li><code>git</code> \u2013 Git shortcuts</li> <li><code>z</code> \u2013 Directory jumping</li> <li><code>zsh-autosuggestions</code> \u2013 Command suggestions while typing</li> <li><code>zsh-syntax-highlighting</code> \u2013 Colorized syntax in real-time</li> </ul>"},{"location":"shell/bash-vs-zsh/#customizing-the-prompt","title":"\ud83c\udfa8 Customizing the Prompt","text":"<p>Zsh works beautifully with themes like Powerlevel10k.</p> <p>Install with:</p> <pre><code>git clone --depth=1 https://github.com/romkatv/powerlevel10k.git \\\n  ${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}/themes/powerlevel10k\n</code></pre> <p>Then update your <code>~/.zshrc</code>:</p> <pre><code>ZSH_THEME=\"powerlevel10k/powerlevel10k\"\n</code></pre>"},{"location":"shell/bash-vs-zsh/#bash-and-zsh-syntax-differences","title":"\ud83e\uddea Bash and Zsh Syntax Differences","text":"<p>Most of the time, the syntax is the same. But here are a few subtle differences:</p> <pre><code># Bash array\nmy_array=(a b c)\necho ${my_array[0]}   # a\n\n# Zsh array\nmy_array=(a b c)\necho ${my_array[1]}   # a (index starts at 1!)\n</code></pre>"},{"location":"shell/bash-vs-zsh/#which-one-should-you-use","title":"\ud83e\udde0 Which One Should You Use?","text":"If you want... Use... Stability and universal compatibility Bash A modern, powerful CLI experience Zsh Writing shell scripts Bash (more portable) Interactive, productive CLI use Zsh (with plugins)"},{"location":"shell/bash-vs-zsh/#conclusion","title":"\u2705 Conclusion","text":"<p>Both shells are excellent. If you're just starting out, Bash is a great foundation. But if you're ready to level up your productivity, try Zsh with Oh My Zsh and see the difference.</p>"},{"location":"shell/basics/","title":"Basics","text":""},{"location":"shell/basics/#shell-basics","title":"Shell Basics","text":"<p>The Linux shell is a command-line interface (CLI) that lets you interact with your operating system. It's a powerful tool for navigating files, running programs, and automating tasks.</p>"},{"location":"shell/basics/#what-is-a-shell","title":"\ud83e\udde0 What is a Shell?","text":"<p>A shell is a program that takes your commands (as text) and tells the operating system what to do. In Linux, common shells include:</p> <ul> <li>Bash (Bourne Again SHell) \u2014 default on most Linux distros</li> <li>Zsh \u2014 user-friendly, customizable, great for developers</li> <li>Fish \u2014 beginner-friendly with smart auto-suggestions</li> <li>Sh \u2014 basic POSIX shell</li> </ul>"},{"location":"shell/basics/#opening-the-shell","title":"\ud83d\ude80 Opening the Shell","text":"<p>You can open the shell by launching a terminal emulator:</p> <ul> <li>On Ubuntu: <code>Ctrl + Alt + T</code></li> <li>On Manjaro: Use the terminal app (<code>Konsole</code>, <code>GNOME Terminal</code>, or <code>Xfce Terminal</code>)</li> </ul>"},{"location":"shell/basics/#basic-shell-commands","title":"\ud83d\udcc2 Basic Shell Commands","text":"<p>Here are some essential commands to get started:</p> Command Description <code>pwd</code> Show current directory <code>ls</code> List files in current directory <code>cd &lt;dir&gt;</code> Change to directory <code>&lt;dir&gt;</code> <code>mkdir &lt;dir&gt;</code> Create a new directory <code>touch &lt;file&gt;</code> Create a new file <code>rm &lt;file&gt;</code> Remove a file <code>cp &lt;src&gt; &lt;dest&gt;</code> Copy file <code>mv &lt;src&gt; &lt;dest&gt;</code> Move or rename file <code>clear</code> Clear the terminal screen <code>exit</code> Exit the shell"},{"location":"shell/basics/#viewing-files-and-processes","title":"\ud83d\udd0d Viewing Files and Processes","text":"<pre><code>cat filename.txt     # View contents of a file\nless filename.txt    # Scrollable view of a file\ntop                  # Show running processes\nps aux               # Show all active processes\n</code></pre>"},{"location":"shell/basics/#using-tab-completion","title":"\ud83d\udee0 Using Tab Completion","text":"<p>Start typing a command or filename and press <code>Tab</code> to autocomplete. This saves time and reduces typos.</p>"},{"location":"shell/basics/#history-and-reuse","title":"\ud83d\udcdc History and Reuse","text":"<ul> <li>Use the <code>\u2191</code> and <code>\u2193</code> arrow keys to browse previous commands.</li> <li>Use <code>history</code> to list all previous commands.</li> <li>Run a previous command:</li> </ul> <pre><code>!42  # Run command number 42 from history\n</code></pre>"},{"location":"shell/basics/#getting-help","title":"\ud83c\udf10 Getting Help","text":"<ul> <li><code>man &lt;command&gt;</code> \u2013 Show the manual page</li> </ul> <p>Example: <code>man ls</code></p> <ul> <li><code>command --help</code> \u2013 Show a short help guide</li> </ul> <p>Example: <code>cp --help</code></p>"},{"location":"shell/basics/#cleanup-and-best-practices","title":"\ud83e\uddf9 Cleanup and Best Practices","text":"<ul> <li>Avoid using <code>sudo</code> unless necessary.</li> <li>Be careful with <code>rm -rf</code> \u2013 it deletes without recovery.</li> <li>Use the shell to automate tasks and increase productivity.</li> </ul>"},{"location":"shell/basics/#next-steps","title":"\u2705 Next Steps","text":"<p>Once you're comfortable with the basics, explore:</p> <ul> <li>Bash vs Zsh</li> <li>Writing Shell Scripts</li> </ul>"},{"location":"shell/cron-jobs/","title":"Cron Jobs","text":""},{"location":"shell/cron-jobs/#automating-tasks-with-cron-jobs","title":"Automating Tasks with Cron Jobs","text":"<p>Once you\u2019ve written a useful shell script, the next step is to automate it \u2014 so it runs on a schedule without your input. That\u2019s where cron jobs come in.</p>"},{"location":"shell/cron-jobs/#what-is-cron","title":"\ud83e\udde0 What is <code>cron</code>?","text":"<ul> <li>cron is a built-in Linux utility used to schedule and automate tasks.</li> <li>A cron job is a command or script scheduled to run at a specific time, date, or interval.</li> </ul>"},{"location":"shell/cron-jobs/#basic-cron-format","title":"\ud83d\udcc5 Basic Cron Format","text":"<p>Each line in a crontab follows this format:</p> \ud83d\udcc5 Cron Format Diagram<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 minute (0 - 59)\n\u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 hour (0 - 23)\n\u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of month (1 - 31)\n\u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 month (1 - 12)\n\u2502 \u2502 \u2502 \u2502 \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500 day of week (0 - 6) (Sunday=0 or 7)\n\u2502 \u2502 \u2502 \u2502 \u2502\n* * * * * command-to-run\n</code></pre> <p>Example:</p> <pre><code>0 7 * * 1 /home/bishow/scripts/weekly_report.sh\n</code></pre> <p>Runs the script every Monday at 7:00 AM</p>"},{"location":"shell/cron-jobs/#editing-your-crontab","title":"\u270d\ufe0f Editing Your Crontab","text":"<p>To edit your user\u2019s cron jobs:</p> <pre><code>crontab -e\n</code></pre> <p>You'll see or create a list of scheduled commands.</p>"},{"location":"shell/cron-jobs/#example-cron-jobs","title":"\ud83e\uddea Example Cron Jobs","text":"Schedule Cron Line Meaning Every minute <code>* * * * * /home/user/myscript.sh</code> Run the script every minute Every day at 7 AM <code>0 7 * * * /home/user/backup.sh</code> Run daily at 7 AM Every Monday <code>0 9 * * 1 /home/user/weekly_report.sh</code> Run every Monday at 9 AM On reboot <code>@reboot /home/user/startup.sh</code> Run once at boot time"},{"location":"shell/cron-jobs/#best-practices","title":"\ud83e\uddf9 Best Practices","text":"<ul> <li>Use absolute paths to scripts and commands:</li> </ul> <pre><code>/usr/bin/python3 /home/user/script.py\n</code></pre> <ul> <li>Redirect output to log files:</li> </ul> <pre><code>* * * * * /home/user/cleanup.sh &gt;&gt; /home/user/logs/cleanup.log 2&gt;&amp;1\n</code></pre> <ul> <li>Always test your script manually before scheduling.</li> </ul>"},{"location":"shell/cron-jobs/#viewing-and-removing-cron-jobs","title":"\ud83d\udd0d Viewing and Removing Cron Jobs","text":"<ul> <li>View your current cron jobs:</li> </ul> <pre><code>crontab -l\n</code></pre> <ul> <li>Remove your current crontab:</li> </ul> <pre><code>crontab -r\n</code></pre>"},{"location":"shell/cron-jobs/#troubleshooting-tips","title":"\ud83d\udee0 Troubleshooting Tips","text":"Problem Solution Script doesn't run Make sure it's executable (<code>chmod +x</code>) Missing environment variables Cron runs in a limited environment \u2014 set PATH in the script No output Redirect stdout and stderr to a log file"},{"location":"shell/cron-jobs/#example-with-logging","title":"\u2705 Example with Logging","text":"<pre><code>0 * * * * /home/bishow/scripts/backup.sh &gt;&gt; /home/bishow/logs/backup.log 2&gt;&amp;1\n</code></pre> <p>This runs <code>backup.sh</code> every hour and logs all output.</p>"},{"location":"shell/cron-jobs/#more-cron-tips","title":"\ud83d\udcda More cron Tips","text":"<ul> <li>Use <code>crontab -e</code> for the current user</li> <li>Use <code>sudo crontab -e</code> for root-level jobs</li> <li>Use <code>systemctl</code> timers on systemd-based systems (more modern alternative to <code>cron</code>)</li> </ul>"},{"location":"shell/cron-jobs/#summary","title":"\ud83e\udde0 Summary","text":"<ul> <li><code>cron</code> helps automate any shell script or command.</li> <li>Great for backups, log rotation, cleanup, reporting, etc.</li> <li>Simple format, powerful results.</li> </ul> <p>Try scheduling one of your scripts now to run daily \u2014 automation is addictive!</p>"},{"location":"shell/oh-my-zsh/","title":"Oh My Zsh","text":""},{"location":"shell/oh-my-zsh/#oh-my-zsh","title":"Oh My Zsh","text":"<p>Oh My Zsh is a popular, community-driven framework for managing your Zsh configuration. It makes using the Z shell (zsh) easier, more powerful, and beautiful with plugins, themes, and helpful defaults.</p>"},{"location":"shell/oh-my-zsh/#why-use-oh-my-zsh","title":"Why Use Oh My Zsh?","text":"<ul> <li>Easy customization of your shell environment</li> <li>Loads plugins for git, docker, npm, and many more</li> <li>Comes with hundreds of themes to personalize your prompt</li> <li>Simplifies common tasks with handy aliases</li> <li>Great community support and frequent updates</li> </ul>"},{"location":"shell/oh-my-zsh/#installing-oh-my-zsh","title":"Installing Oh My Zsh","text":"<ol> <li> <p>Make sure <code>zsh</code> is installed</p> <pre><code>zsh --version\n</code></pre> <p>If not, install it via your package manager:</p> <ul> <li> <p>Ubuntu/Debian:</p> <pre><code>sudo apt install zsh\n</code></pre> </li> <li> <p>Manjaro/Arch:</p> <pre><code>sudo pacman -S zsh\n</code></pre> </li> </ul> </li> <li> <p>Install Oh My Zsh via curl</p> <pre><code>sh -c \"$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\"\n</code></pre> <p>Or via <code>wget</code>:</p> <pre><code>sh -c \"$(wget https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)\"\n</code></pre> </li> <li> <p>The installer will:</p> <ul> <li>Backup your existing <code>.zshrc</code> if it exists</li> <li>Create a new <code>.zshrc</code> with default Oh My Zsh settings</li> <li>Set <code>zsh</code> as your default shell</li> </ul> </li> </ol>"},{"location":"shell/oh-my-zsh/#basic-usage","title":"Basic Usage","text":"<p>After installation, open a new terminal or run:</p> <pre><code>exec zsh\n</code></pre> <p>Your prompt will change to the Oh My Zsh default theme.</p>"},{"location":"shell/oh-my-zsh/#configuration","title":"Configuration","text":"<p>The main configuration file is <code>~/.zshrc</code>.</p> <p>Here you can:</p> <ul> <li> <p>Change your theme (default is <code>robbyrussell</code>):</p> <pre><code>ZSH_THEME=\"agnoster\"\n</code></pre> </li> <li> <p>Enable plugins by listing them in the <code>plugins</code> array:</p> <pre><code>plugins=(git docker npm)\n</code></pre> </li> <li> <p>Customize aliases, environment variables, and more.</p> </li> </ul>"},{"location":"shell/oh-my-zsh/#useful-plugins","title":"Useful Plugins","text":"<p>Some popular plugins:</p> Plugin Description git Git aliases and helpers docker Docker commands shortcuts z Jump around directories sudo Automatically prefix commands with sudo when permission is denied colored-man Colorize man pages <p>To activate plugins, add them to your <code>.zshrc</code> plugins list:</p> <pre><code>plugins=(git docker z sudo colored-man)\n</code></pre> <p>Then reload:</p> <pre><code>source ~/.zshrc\n</code></pre>"},{"location":"shell/oh-my-zsh/#changing-themes","title":"Changing Themes","text":"<p>Oh My Zsh ships with many themes.</p> <ul> <li> <p>List themes:</p> <pre><code>ls ~/.oh-my-zsh/themes\n</code></pre> </li> <li> <p>Set your theme in <code>.zshrc</code>:</p> <pre><code>ZSH_THEME=\"agnoster\"\n</code></pre> </li> <li> <p>Reload config:</p> <pre><code>source ~/.zshrc\n</code></pre> </li> </ul>"},{"location":"shell/oh-my-zsh/#updating-oh-my-zsh","title":"Updating Oh My Zsh","text":"<p>Update Oh My Zsh to get latest features and fixes:</p> <pre><code>omz update\n</code></pre> <p>or</p> <pre><code>upgrade_oh_my_zsh\n</code></pre>"},{"location":"shell/oh-my-zsh/#uninstalling-oh-my-zsh","title":"Uninstalling Oh My Zsh","text":"<p>Run the uninstall script:</p> <pre><code>uninstall_oh_my_zsh\n</code></pre> <p>Or manually remove:</p> <pre><code>rm -rf ~/.oh-my-zsh\nrm ~/.zshrc\nchsh -s $(which bash)  # set default shell back to bash\n</code></pre>"},{"location":"shell/oh-my-zsh/#summary","title":"Summary","text":"<p>Oh My Zsh supercharges your terminal with themes, plugins, and shortcuts. It\u2019s easy to install and customize, making <code>zsh</code> much more fun and productive.</p>"},{"location":"shell/oh-my-zsh/#resources","title":"Resources","text":"<ul> <li>Oh My Zsh GitHub repo</li> <li>Oh My Zsh</li> <li>List of themes</li> <li>List of plugins</li> </ul>"},{"location":"shell/scripting/","title":"Scripting","text":""},{"location":"shell/scripting/#writing-shell-scripts","title":"Writing Shell Scripts","text":"<p>Shell scripts let you automate tasks in Linux by writing a sequence of commands in a file. This is a key skill for system administrators, developers, and anyone who wants to save time on repetitive tasks.</p>"},{"location":"shell/scripting/#what-is-a-shell-script","title":"\ud83e\udde0 What is a Shell Script?","text":"<p>A shell script is a text file containing a list of shell commands. Instead of typing commands one by one, you can write them in a script and run it all at once.</p>"},{"location":"shell/scripting/#creating-your-first-script","title":"\ud83d\udcc1 Creating Your First Script","text":"<ol> <li>Open a terminal</li> <li>Create a file:</li> </ol> <pre><code>nano hello.sh\n</code></pre> <ol> <li>Add this content:</li> </ol> <pre><code>#!/bin/bash\n\necho \"Hello, world!\"\n</code></pre> <ol> <li> <p>Save and exit (<code>Ctrl + X</code>, then <code>Y</code>, then <code>Enter</code>)</p> </li> <li> <p>Make the script executable:</p> </li> </ol> <pre><code>chmod +x hello.sh\n</code></pre> <ol> <li>Run it:</li> </ol> <pre><code>./hello.sh\n</code></pre> <p>You\u2019ll see:</p> <pre><code>Hello, world!\n</code></pre>"},{"location":"shell/scripting/#variables","title":"\ud83d\udce6 Variables","text":"<pre><code>name=\"Bishow\"\necho \"Hello, $name\"\n</code></pre>"},{"location":"shell/scripting/#user-input","title":"\ud83d\udcdd User Input","text":"<pre><code>echo \"Enter your name:\"\nread user_name\necho \"Hi, $user_name!\"\n</code></pre>"},{"location":"shell/scripting/#conditional-statements","title":"\ud83d\udd01 Conditional Statements","text":"<pre><code>if [ -f \"file.txt\" ]; then\n  echo \"file.txt exists\"\nelse\n  echo \"file.txt does not exist\"\nfi\n</code></pre>"},{"location":"shell/scripting/#loops","title":"\ud83d\udd04 Loops","text":""},{"location":"shell/scripting/#for-loop","title":"For Loop","text":"<pre><code>for i in 1 2 3\ndo\n  echo \"Number $i\"\ndone\n</code></pre>"},{"location":"shell/scripting/#while-loop","title":"While Loop","text":"<pre><code>count=1\nwhile [ $count -le 5 ]\ndo\n  echo \"Count is $count\"\n  ((count++))\ndone\n</code></pre>"},{"location":"shell/scripting/#error-handling","title":"\ud83d\udca5 Error Handling","text":"<pre><code>#!/bin/bash\n\nif ! command -v git &amp;&gt; /dev/null\nthen\n  echo \"Git is not installed\"\n  exit 1\nfi\n\necho \"Git is available\"\n</code></pre>"},{"location":"shell/scripting/#run-scripts-with-bash-or-zsh","title":"\ud83e\uddea Run Scripts with Bash or Zsh","text":"<p>If you don't make it executable, you can still run it:</p> <pre><code>bash hello.sh   # or\nzsh hello.sh\n</code></pre> <p>But for portability, always start your script with the shebang:</p> <pre><code>#!/bin/bash\n</code></pre>"},{"location":"shell/scripting/#common-mistakes","title":"\ud83d\udeab Common Mistakes","text":"Mistake Fix Forgetting <code>#!/bin/bash</code> Add it at the top Forgetting to <code>chmod +x</code> Make the file executable Using spaces around <code>=</code> in variables Remove spaces: <code>name=value</code> Using Windows line endings Run <code>dos2unix script.sh</code>"},{"location":"shell/scripting/#further-learning","title":"\ud83d\udcda Further Learning","text":"<ul> <li>Use <code>functions</code> in scripts to modularize logic</li> <li>Use <code>cron</code> to schedule your scripts</li> <li>Read more: <code>man bash</code></li> </ul>"},{"location":"shell/scripting/#summary","title":"\u2705 Summary","text":"<p>Shell scripting is a powerful skill. With just a few lines, you can:</p> <ul> <li>Automate installations</li> <li>Perform backups</li> <li>Monitor logs</li> <li>Configure environments</li> </ul> <p>Start small and experiment!</p>"},{"location":"ubuntu/overview/","title":"Overview","text":""},{"location":"blog/archive/2025/","title":"2025","text":""}]}